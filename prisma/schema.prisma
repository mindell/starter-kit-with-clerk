// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum SubscriptionStatus {
  ACTIVE
  CANCELLED
  EXPIRED
  PENDING
  FAILED
}

enum BillingInterval {
  MONTHLY
  YEARLY
  QUARTERLY
}

enum CommentStatus {
  PENDING
  APPROVED
  REJECTED
  SPAM
}

model Subscription {
  id              String            @id @default(uuid())
  userId          String            @unique
  status          SubscriptionStatus
  planId          String
  startDate       DateTime
  endDate         DateTime?
  billingInterval BillingInterval
  amount          Decimal          @db.Decimal(10, 2)
  currency        String           @default("USD")
  lastBillingDate DateTime?
  nextBillingDate DateTime?
  cancelledAt     DateTime?
  trialEndsAt     DateTime?
  paymentMethod   PaymentMethod?   @relation(fields: [paymentMethodId], references: [id])
  paymentMethodId String?
  invoices        Invoice[]
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt

  @@index([userId])
  @@index([status])
}

model PaymentMethod {
  id            String           @id @default(uuid())
  userId        String
  type          String            // e.g., 'card', 'bank_account'
  provider      String            // e.g., 'stripe'
  lastFour      String?           // Last 4 digits of card/account
  expiryMonth   Int?              // For cards
  expiryYear    Int?              // For cards
  isDefault     Boolean           @default(false)
  subscriptions Subscription[]
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt

  @@index([userId])
}

model Invoice {
  id                 String       @id @default(uuid())
  subscriptionId     String
  subscription       Subscription @relation(fields: [subscriptionId], references: [id])
  amount             Decimal      @db.Decimal(10, 2)
  currency           String       @default("USD")
  status             String       // e.g., 'paid', 'pending', 'failed'
  paidAt             DateTime?
  dueDate            DateTime 
  invoiceNumber      String       @unique
  billingPeriodStart DateTime
  billingPeriodEnd   DateTime
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt

  @@index([subscriptionId])
  @@index([status])
}

model BlogAnalytics {
  id            String    @id @default(uuid())
  articleId     String    // Strapi Article ID
  slug          String    // Article slug for easy querying
  pageViews     Int       @default(0)
  readingTime   Int       // in seconds
  uniqueViews   Int       @default(0)
  lastViewed    DateTime  @updatedAt
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@index([articleId])
  @@index([slug])
}

model BlogComment {
  id            String        @id @default(uuid())
  articleId     String        // Strapi Article ID
  content       String        @db.Text
  authorId      String        // Clerk User ID
  status        CommentStatus @default(PENDING)
  parentId      String?       // For nested comments
  parent        BlogComment?  @relation("CommentReplies", fields: [parentId], references: [id])
  replies       BlogComment[] @relation("CommentReplies")
  isNotified    Boolean       @default(false)
  moderatedAt   DateTime?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  @@index([articleId])
  @@index([authorId])
  @@index([status])
}

model CommentModeration {
  id          String    @id @default(uuid())
  commentId   String    @unique
  reason      String?   @db.Text
  action      String    // e.g., 'rejected', 'marked_as_spam'
  moderatorId String    // Clerk User ID
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([commentId])
}